#!/usr/bin/env python
# coding: utf-8

# # DeepDreaming with TensorFlow

# >[Loading the model graph](#loading)
# 
# >[Naive feature visualization](#naive)
# 
# >[Multiscale image generation](#multiscale)
# 
# >[Laplacian Pyramid Gradient Normalization](#laplacian)
# 
# >[Playing with feature visualzations](#playing)
# 
# >[DeepDream](#deepdream)
# 
# 

# This notebook demonstrates a number of Convolutional Neural Network image generation techniques implemented with TensorFlow for fun and science:
# 
# - visualize individual feature channels and their combinations to explore the space of patterns learned by the neural network (see [GoogLeNet](http://storage.googleapis.com/deepdream/visualz/tensorflow_inception/index.html) and [VGG16](http://storage.googleapis.com/deepdream/visualz/vgg16/index.html) galleries)
# - embed TensorBoard graph visualizations into Jupyter notebooks
# - produce high-resolution images with tiled computation ([example](http://storage.googleapis.com/deepdream/pilatus_flowers.jpg))
# - use Laplacian Pyramid Gradient Normalization to produce smooth and colorful visuals at low cost
# - generate DeepDream-like images with TensorFlow (DogSlugs included)
# 
# 
# The network under examination is the [GoogLeNet architecture](http://arxiv.org/abs/1409.4842), trained to classify images into one of 1000 categories of the [ImageNet](http://image-net.org/) dataset. It consists of a set of layers that apply a sequence of transformations to the input image. The parameters of these transformations were determined during the training process by a variant of gradient descent algorithm. The internal image representations may seem obscure, but it is possible to visualize and interpret them. In this notebook we are going to present a few tricks that allow to make these visualizations both efficient to generate and even beautiful. Impatient readers can start with exploring the full galleries of images generated by the method described here for [GoogLeNet](http://storage.googleapis.com/deepdream/visualz/tensorflow_inception/index.html) and [VGG16](http://storage.googleapis.com/deepdream/visualz/vgg16/index.html) architectures.

# In[1]:


# boilerplate code
from __future__ import print_function
import os
from io import BytesIO
import numpy as np
from functools import partial
import PIL.Image
# from IPython.display import clear_output, Image, display, HTML

import tensorflow as tf
from tensorflow.contrib import image


# <a id='loading'></a>
# ## Loading the model graph
# 
# The pretrained network can be downloaded [here](https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip). Unpack the `tensorflow_inception_graph.pb` file from the archive and set its path to `model_fn` variable. Alternatively you can uncomment and run the following cell to download the network:

# In[2]:


#!wget https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip && unzip inception5h.zip


# In[3]:


print(tf.__version__)


# In[4]:


# model_fn = 'greebles_inv_train_argmax.pb' #works but not softmax
# model_fn = 'greebles_inv_train_softmax.pb' #im going to say this works!!
# model_fn = 'cifar_softmax.pb'
# model_fn = 'frozen_resnet_v2_50.pb'

model_fn_name = 'output_inv_greeble_new_params'
model_fn = os.path.join(os.getcwd(),model_fn_name,'saved_model.pb')

# creating TensorFlow session and loading the model from the model_fn file 
graph = tf.Graph()
sess = tf.InteractiveSession(graph=graph)
with tf.gfile.FastGFile(model_fn, 'rb') as f:
    graph_def = tf.GraphDef()
    graph_def.ParseFromString(f.read())
t_input = tf.placeholder(np.float32, name='input') # define the input tensor
# t_input = tf.placeholder(np.float32, name='input') # define the input tensor
# t_input_1 = tf.placeholder(np.int64, name='input_1') # define the input tensor
t_input_1 = tf.constant([1], np.int64, name='input_1') # define the input tensor
# t_input_2 = tf.placeholder(np.float32, name='input_2') # define the input tensor
t_input_3 = tf.constant(False, name='input_3') # define the input tensor
# imagenet_mean = 117.0
imagenet_mean = 0.0
t_preprocessed = tf.expand_dims(t_input-imagenet_mean, 0)
# tf.import_graph_def(graph_def, {'input/Placeholder':t_preprocessed})
# tf.import_graph_def(graph_def, {'input/map/TensorArrayStack/TensorArrayGatherV3':t_preprocessed}) #WORKS kind of, only for first conv2d
# tf.import_graph_def(graph_def, {'input/map/TensorArrayStack/TensorArrayGatherV3':t_preprocessed, 'input/Placeholder_3':t_input_3})
tf.import_graph_def(graph_def, {'input/map/TensorArrayStack/TensorArrayGatherV3':t_preprocessed, 'input/Placeholder_3':t_input_3, 'input/Placeholder_1':t_input_1})
# tf.import_graph_def(graph_def, {'input/Placeholder':t_preprocessed, 'input/Placeholder_1':t_input_1, 'input/Placeholder_2':t_input_2, 'input/Placeholder_3':t_input_3})


# In[ ]:





# In[5]:


# for op in graph.get_operations(): 
# #     t = op.type.lower()
# #     if t == 'maxpool' or t == 'relu' or t == 'conv2d':
# #         for input in op.inputs:
# #             print(input.name, input.dtype)
#     print(op.name, op.outputs)
names = [n.name for n in tf.get_default_graph().as_graph_def().node]
# names = [(n.name, n.attr['shape']) for n in tf.get_default_graph().as_graph_def().node]
# print(names[:-1])
for n in names:
    print(n)


# To take a glimpse into the kinds of patterns that the network learned to recognize, we will try to generate images that maximize the sum of activations of particular channel of a particular convolutional layer of the neural network. The network we explore contains many convolutional layers, each of which outputs tens to hundreds of feature channels, so we have plenty of patterns to explore.

# In[6]:


layers = [op.name for op in graph.get_operations() if op.type=='Conv2D' and 'import/' in op.name]
feature_nums = [int(graph.get_tensor_by_name(name+':0').get_shape()[-1]) for name in layers]

print('Number of layers', len(layers))
print('Total number of feature channels:', sum(feature_nums))
#feature_nums


# In[7]:


def T(layer):
    '''Helper for getting layer output tensor'''
#     return graph.get_tensor_by_name("import/%s:0"%layer)
    return graph.get_tensor_by_name("%s:0"%layer)


# In[8]:


layer=layers[18]
print(layer)
# layer = layer.split("/")[1]
print(T(layer))


# In[9]:


T(layer)


# In[10]:


layers_to_see = {}
for l, layer in enumerate(layers):
#     layer = layer.split("/")[1]
    num_channels = T(layer).shape[3]
    print(layer, num_channels)
    layers_to_see[layer] = int(num_channels)


# In[11]:


layers_to_see_list = list(layers_to_see)

# Insert here string of last layer name to continue from
last_done = "import/"+'unit_3_4_sub1_conv1_Conv2D'.replace("_","/")
lay_remove_list = [x.replace("_","/") for x in layers_to_see_list]
idx_remove_upto = lay_remove_list.index(last_done)

#Start from the beggining
idx_remove_upto = 0

print(idx_remove_upto)
print("\n")
print(layers_to_see_list[idx_remove_upto:])


# <a id='naive'></a>
# ## Naive feature visualization

# Let's start with a naive way of visualizing these. Image-space gradient ascent!

# In[12]:


# Picking some internal layer. Note that we use outputs before applying the ReLU nonlinearity
# to have non-zero gradients for features with negative initial activations.
# layer = 'import/unit_3_4/sub2/conv2/Conv2D'
layer = 'import/unit_3_4/sub2/conv2/Conv2D:0'
# layer = 'import/unit_last/leaky_relu:0'
# layer = 'import/costs/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1'
# layer = 'import/logit/xw_plus_b:0'
channel = 1 # picking some feature channel to visualize

# start with a gray image with a little noise
img_noise = np.random.uniform(size=(224,224,3)) + 100.0
# img_noise = np.random.uniform(size=(32,32,3)) + 100.0


# In[13]:



def showarray(a, fmt='jpeg'):
    '''create a jpeg file from an array a and visualize it'''
    # clip the values to be between 0 and 255
    a = np.uint8(np.clip(a, 0, 1)*255)
    f = BytesIO()
    PIL.Image.fromarray(a).save(f, fmt)
    # display(Image(data=f.getvalue()))
    
def visstd(a, s=0.1):
    '''Normalize the image range for visualization'''
    return (a-a.mean())/max(a.std(), 1e-4)*s + 0.5


def render_naive(t_obj, img0=img_noise, iter_n=20, step=1.0):
    
    # t_obj: is the featuremap (or maps) where we want to mixamise the activities of the neurons e.g. T(layer)[:,:,:,channel]
    # img0: is the input image e.g. random noise or a cat
    # iter_n: number of iterations in the gradient ascent
    # step: step size of the gradient
    
    t_score = tf.reduce_mean(t_obj) # defining the optimization objective (mean of the neuron activities in t_obj)
    t_grad = tf.gradients(t_score, t_input)[0] # calculate the gradient of the objective function!!!
    
    img = img0.copy()
    showarray(visstd(img)) # show the input image
    
    for i in range(iter_n): # for iter_n iterations keep updating the image
        g, score = sess.run([t_grad, t_score], {t_input:img})
        # normalizing the gradient, so the same step size should work 
        g /= g.std()+1e-8         # for different layers and networks
        img += g*step
        print(i, score, end = ' ') # show the current objective value
        showarray(visstd(img)) # show the actual image
    #clear_output()
    

# render_naive(T(layer)[:,:,:,channel]) # run the render_naive function and start halucinating!
actual_T = graph.get_tensor_by_name(layer)
# render_naive(actual_T[:,channel]) # run the render_naive function and start halucinating!
render_naive(actual_T[:,:,:,channel]) # run the render_naive function and start halucinating!

# print(T(layer).shape)
# t_obj = T(layer)[:,:,:,channel]
# print(t_obj)
# t_score = tf.reduce_mean(t_obj)
# print(t_score)
# t_grad = tf.gradients(t_score, t_input)[0]


# <a id="multiscale"></a>
# ## Multiscale image generation
# 
# Looks like the network wants to show us something interesting! Let's help it. We are going to apply gradient ascent on multiple scales. Details formed on smaller scale will be upscaled and augmented with additional details on the next scale.
# 
# With multiscale image generation it may be tempting to set the number of octaves to some high value to produce wallpaper-sized images. Storing network activations and backprop values will quickly run out of GPU memory in this case. There is a simple trick to avoid this: split the image into smaller tiles and compute each tile gradient independently. Applying random shifts to the image before every iteration helps avoid tile seams and improves the overall image quality.

# In[14]:


def tffunc(*argtypes):
    '''Helper that transforms TF-graph generating function into a regular one.
    See "resize" function below.
    '''
    placeholders = list(map(tf.placeholder, argtypes))
    def wrap(f):
        out = f(*placeholders)
        def wrapper(*args, **kw):
            return out.eval(dict(zip(placeholders, args)), session=kw.get('session'))
        return wrapper
    return wrap

# Helper function that uses TF to resize an image
def resize(img, size):
    img = tf.expand_dims(img, 0)
    return tf.image.resize_bilinear(img, size)[0,:,:,:]
resize = tffunc(np.float32, np.int32)(resize)


def calc_grad_tiled(img, t_grad, tile_size=512):
    '''Compute the value of tensor t_grad over the image in a tiled way.
    Random shifts are applied to the image to blur tile boundaries over 
    multiple iterations.'''
    sz = tile_size
#     print("Tile Size:", sz)
    h, w = img.shape[:2] # size of the image
#     print("Height:{}, Width:{}".format(h, w))
    sx, sy = np.random.randint(sz, size=2) # random shift numbers generated
    img_shift = np.roll(np.roll(img, sx, 1), sy, 0) #shift the whole image. np.roll = Roll array elements along a given axis
    grad = np.zeros_like(img)
    for y in range(0, max(h-sz//2, sz),sz):
        for x in range(0, max(w-sz//2, sz),sz):
            sub = img_shift[y:y+sz,x:x+sz] # get the image patch (tile)
            g = sess.run(t_grad, {t_input:sub}) # calculate the gradient only in the image patch not in the whole image!
            grad[y:y+sz,x:x+sz] = g # put the whole gradient together from the tiled gradients g
    return np.roll(np.roll(grad, -sx, 1), -sy, 0) # shift back


# In[15]:


def render_multiscale(t_obj, img0=img_noise, iter_n=10, step=1.0, octave_n=3, octave_scale=1.5):
    t_score = tf.reduce_mean(t_obj) # defining the optimization objective
    t_grad = tf.gradients(t_score, t_input)[0] # behold the power of automatic differentiation!
    
    img = img0.copy()
    for octave in range(octave_n):
        if octave>0:
            hw = np.float32(img.shape[:2])*octave_scale # calculate new height and width (scale up by octave_scale)
            img = resize(img, np.int32(hw)) # rescale the image to the new size
        for i in range(iter_n):
            g = calc_grad_tiled(img, t_grad) # calculate the gradient of the new image in each pixel using the calc_grad_tiled function
            # normalizing the gradient, so the same step size should work 
            g /= g.std()+1e-8         # for different layers and networks
            img += g*step # update the image with the gradient
            print('.', end = ' ')
            #clear_output()
            showarray(visstd(img))

# render_multiscale(T(layer)[:,:,:,channel])


# <a id="laplacian"></a>
# ## Laplacian Pyramid Gradient Normalization
# 
# This looks better, but the resulting images mostly contain high frequencies. Can we improve it? One way is to add a smoothness prior into the optimization objective. This will effectively blur the image a little every iteration, suppressing the higher frequencies, so that the lower frequencies can catch up. This will require more iterations to produce a nice image. Why don't we just boost lower frequencies of the gradient instead? One way to achieve this is through the [Laplacian pyramid](https://en.wikipedia.org/wiki/Pyramid_%28image_processing%29#Laplacian_pyramid) decomposition. We call the resulting technique _Laplacian Pyramid Gradient Normalization_.

# In[16]:


k = np.float32([1,4,6,4,1])
k = np.outer(k, k)
k5x5 = k[:,:,None,None]/k.sum()*np.eye(3, dtype=np.float32)

def lap_split(img):
    '''Split the image into lo and hi frequency components'''
    with tf.name_scope('split'):
        lo = tf.nn.conv2d(img, k5x5, [1,2,2,1], 'SAME')
        lo2 = tf.nn.conv2d_transpose(lo, k5x5*4, tf.shape(img), [1,2,2,1])
        hi = img-lo2
    return lo, hi

def lap_split_n(img, n):
    '''Build Laplacian pyramid with n splits'''
    levels = []
    for i in range(n):
        img, hi = lap_split(img)
        levels.append(hi)
    levels.append(img)
    return levels[::-1]

def lap_merge(levels):
    '''Merge Laplacian pyramid'''
    img = levels[0]
    for hi in levels[1:]:
        with tf.name_scope('merge'):
            img = tf.nn.conv2d_transpose(img, k5x5*4, tf.shape(hi), [1,2,2,1]) + hi
    return img

def normalize_std(img, eps=1e-10):  
    '''Normalize image by making its standard deviation = 1.0'''
    with tf.name_scope('normalize'):
        std = tf.sqrt(tf.reduce_mean(tf.square(img)))
        return img/tf.maximum(std, eps)

def lap_normalize(img, scale_n=4):
    '''Perform the Laplacian pyramid normalization.'''
    img = tf.expand_dims(img,0)
    tlevels = lap_split_n(img, scale_n)
    tlevels = list(map(normalize_std, tlevels))
    out = lap_merge(tlevels)
    return out[0,:,:,:]

# Showing the lap_normalize graph with TensorBoard
lap_graph = tf.Graph()
with lap_graph.as_default():
    lap_in = tf.placeholder(np.float32, name='lap_in')
    lap_out = lap_normalize(lap_in)


# In[17]:


def render_lapnorm(t_obj, img0=img_noise, visfunc=visstd,
                   iter_n=10, step=1.0, octave_n=3, octave_scale=1.5, lap_n=4):
    t_score = tf.reduce_mean(t_obj) # defining the optimization objective
    t_grad = tf.gradients(t_score, t_input)[0] # behold the power of automatic differentiation!
    # build the laplacian normalization graph
    lap_norm_func = tffunc(np.float32)(partial(lap_normalize, scale_n=lap_n))

    img = img0.copy()
    for octave in range(octave_n):
        if octave>0:
            hw = np.float32(img.shape[:2])*octave_scale
            img = resize(img, np.int32(hw))
        for i in range(iter_n):
            g = calc_grad_tiled(img, t_grad)
            g = lap_norm_func(g)
            img += g*step
            if (i%(iter_n//5))==0: print(i, end = ' ')
        # clear_output()
        showarray(visfunc(img))
    return img

# render_lapnorm(T(layer)[:,:,:,channel])
print("Done")


# # Custom

# In[ ]:


import os
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
# get_ipython().run_line_magic('matplotlib', 'inline')
# np.random.seed(2018)
# tf.set_random_seed(2)
# img_noise = np.random.uniform(size=(224,224,3)) + 100.0
img_noise = np.random.uniform(size=(128,128,3)) + 100.0
# img_noise = np.random.uniform(size=(32,32,3)) + 100.0
# img_noise = np.random.uniform(size=(64,64,3)) + 100.0
#capas = [op.name for op in graph.get_operations() if op.type=='Conv2D' and 'import/' in op.name]
capas = [op.name for op in graph.get_operations() if 'Softmax' in op.type and 'import/' in op.name]
for op in graph.get_operations():
    if 'import/' in op.name and 'oftmax' in op.type:
        print("Tensors: {} -> {}".format(op.type, op.name))
capa = 'import/costs/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1'
# capa = 'import/unit_1_0/sub1/conv1/Conv2D:0'

# capa = 'import/unit_3_4/sub2/conv2/Conv2D:0'

# capa = 'import/unit_last/leaky_relu:0'
# capa = 'logit/xw_plus_b:0'
canal = 0
print(capas)
actual_T = graph.get_tensor_by_name(capa)
# print("Channels: ", actual_T.shape[1], '\n', actual_T,'\n')
# print(actual_T[:,canal], '\n')
print(actual_T)

# tf.gradients(tf.reduce_mean(actual_T), actual_T)[0]
# for l, layer in enumerate(capas):
#     layer = layer.split("/")[1]
#     num_channels = T(layer).shape[0]
#     print(layer, num_channels)
#     print(T(layer))
print("*"*20)
tests = []
# T("softmax2").shape[1]
# T(capa)
# render_lapnorm(T(capa)[:,:,:,canal], iter_n=10, step=1.0, octave_n=3)
# capa = 'import/unit_3_4/sub2/conv2/Conv2D'
# T(capa)
# render_lapnorm(T(capa)[:,:,:,canal], iter_n=10, step=1.0, octave_n=3)

# img = render_lapnorm(actual_T[:,canal], img0=img_noise, iter_n=30, step=0.0005, octave_n=3, octave_scale=1.5, lap_n=4) #kind of worked with small step size
# img = render_lapnorm(actual_T[:,canal], img0=img_noise, iter_n=300, step=1.0, octave_n=3, octave_scale=1.5, lap_n=4)
img = render_lapnorm(actual_T[:,canal], img0=img_noise, iter_n=300, step=0.00005, octave_n=3, octave_scale=1.5, lap_n=4)

# img = render_lapnorm(actual_T[:,:,:,canal], img0=img_noise, iter_n=30, step=200.0, octave_n=3, octave_scale=1.5, lap_n=4)
# img = render_lapnorm(actual_T[:,:,:,canal], img0=img_noise, iter_n=20, step=1.0, octave_n=4, octave_scale=1.5, lap_n=4)
# img = render_lapnorm(actual_T[0,:,:,canal], img0=img_noise, iter_n=20, step=1.0, octave_n=4, octave_scale=1.5, lap_n=4)
print(img.shape)

# num_images = 10
# num_images = 2
# for i in range(num_images):
# #     clear_output()
#     print(i)
# #     tests.append(render_lapnorm(T(capa)[:,canal], iter_n=10, step=1.0, octave_n=3))
#     tests.append(render_lapnorm(actual_T[:,canal], iter_n=30, step=1.0, octave_n=2))
# # showarray(visstd(img_noise))

######################################
def showarray_no(a, fmt='png'):
    # clip the values to be between 0 and 255
    a = np.uint8(np.clip(a, 0, 1)*255)
    f = BytesIO()
    PIL.Image.fromarray(a).save(f, fmt)
    return a

# counter = 0
if not os.path.exists('conv2d_{}'.format(model_fn_name)): os.mkdir('conv2d_{}'.format(model_fn_name))
for l in layers_to_see_list[idx_remove_upto:]:
    for c in range(layers_to_see[l]):
        print("{:02d}".format(c))
        l_new = l.replace("/","_").replace("import_","")
        fig_title = "{}_{:02d}".format(l_new,c)
        
        if os.path.exists("conv2d_{}/".format(model_fn_name)+fig_title+".png"):
            continue
        else:
            img = render_lapnorm(T(l)[:,:,:,c], img0=img_noise, iter_n=20, step=1.0, octave_n=4, octave_scale=1.5, lap_n=4)
            plt.imshow(showarray_no(visstd(img)))
            plt.axis("off")
            plt.title(fig_title)
            plt.tight_layout()
            plt.savefig("conv2d_{}/".format(model_fn_name)+fig_title, bbox_inches='tight')
            plt.show()
            plt.close()
#     if counter==1: break
#     counter+=1
        

# plt.savefig('visual1.png', dpi=300)
print("Done!")
